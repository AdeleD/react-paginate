{"version":3,"sources":["../react_components/PaginationBoxView.js"],"names":["PaginationBoxView","props","handlePreviousPage","selected","state","evt","preventDefault","returnValue","handlePageSelected","handleNextPage","pageCount","setState","callCallback","selectedItem","onPageChange","pagination","items","pageRangeDisplayed","marginPagesDisplayed","breakLabel","breakClassName","index","push","getPageElement","leftSide","rightSide","page","breakView","createPageView","length","initialPage","forcePage","disableInitialCallback","nextProps","pageIndex","hrefBuilder","pageClassName","pageLinkClassName","activeClassName","extraAriaContext","bind","disabledClassName","previousClassName","nextClassName","containerClassName","previousLinkClassName","previousLabel","nextLinkClassName","nextLabel","previousClasses","nextClasses","Component","propTypes","PropTypes","number","isRequired","node","func","bool","string","defaultProps"],"mappings":"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","file":"PaginationBoxView.js","sourcesContent":["'use strict';\r\n\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PageView from './PageView';\r\nimport BreakView from './BreakView';\r\n\r\n\r\nexport default class PaginationBoxView extends Component {\r\n  static propTypes = {\r\n    pageCount             : PropTypes.number.isRequired,\r\n    pageRangeDisplayed    : PropTypes.number.isRequired,\r\n    marginPagesDisplayed  : PropTypes.number.isRequired,\r\n    previousLabel         : PropTypes.node,\r\n    nextLabel             : PropTypes.node,\r\n    breakLabel            : PropTypes.node,\r\n    hrefBuilder           : PropTypes.func,\r\n    onPageChange          : PropTypes.func,\r\n    initialPage           : PropTypes.number,\r\n    forcePage             : PropTypes.number,\r\n    disableInitialCallback: PropTypes.bool,\r\n    containerClassName    : PropTypes.string,\r\n    pageClassName         : PropTypes.string,\r\n    pageLinkClassName     : PropTypes.string,\r\n    activeClassName       : PropTypes.string,\r\n    previousClassName     : PropTypes.string,\r\n    nextClassName         : PropTypes.string,\r\n    previousLinkClassName : PropTypes.string,\r\n    nextLinkClassName     : PropTypes.string,\r\n    disabledClassName     : PropTypes.string,\r\n    breakClassName        : PropTypes.string\r\n  };\r\n\r\n  static defaultProps = {\r\n    pageCount             : 10,\r\n    pageRangeDisplayed    : 2,\r\n    marginPagesDisplayed  : 3,\r\n    activeClassName       : \"selected\",\r\n    previousClassName     : \"previous\",\r\n    nextClassName         : \"next\",\r\n    previousLabel         : \"Previous\",\r\n    nextLabel             : \"Next\",\r\n    breakLabel            : \"...\",\r\n    disabledClassName     : \"disabled\",\r\n    disableInitialCallback: false\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      selected: props.initialPage ? props.initialPage :\r\n                props.forcePage   ? props.forcePage :\r\n                0\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { initialPage, disableInitialCallback } = this.props;\r\n    // Call the callback with the initialPage item:\r\n    if (typeof(initialPage) !== 'undefined' && !disableInitialCallback) {\r\n      this.callCallback(initialPage);\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (typeof(nextProps.forcePage) !== 'undefined' && this.props.forcePage !== nextProps.forcePage) {\r\n      this.setState({selected: nextProps.forcePage});\r\n    }\r\n  }\r\n\r\n  handlePreviousPage = evt => {\r\n    const { selected } = this.state;\r\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\r\n    if (selected > 0) {\r\n      this.handlePageSelected(selected - 1, evt);\r\n    }\r\n  };\r\n\r\n  handleNextPage = evt => {\r\n    const { selected } = this.state;\r\n    const { pageCount } = this.props;\r\n\r\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\r\n    if (selected < pageCount - 1) {\r\n      this.handlePageSelected(selected + 1, evt);\r\n    }\r\n  };\r\n\r\n  handlePageSelected = (selected, evt) => {\r\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\r\n\r\n    if (this.state.selected === selected) return;\r\n\r\n    this.setState({selected: selected});\r\n\r\n    // Call the callback with the new selected item:\r\n    this.callCallback(selected);\r\n  };\r\n\r\n  hrefBuilder(pageIndex) {\r\n    const { hrefBuilder, pageCount } = this.props;\r\n    if (hrefBuilder &&\r\n      pageIndex !== this.state.selected &&\r\n      pageIndex >= 0 &&\r\n      pageIndex < pageCount\r\n    ) {\r\n      return hrefBuilder(pageIndex + 1);\r\n    }\r\n  }\r\n\r\n  callCallback = (selectedItem) => {\r\n    if (typeof(this.props.onPageChange) !== \"undefined\" &&\r\n        typeof(this.props.onPageChange) === \"function\") {\r\n      this.props.onPageChange({selected: selectedItem});\r\n    }\r\n  };\r\n\r\n  getPageElement(index) {\r\n    const { selected } = this.state;\r\n    const {\r\n      pageClassName,\r\n      pageLinkClassName,\r\n      activeClassName,\r\n      extraAriaContext\r\n    } = this.props;\r\n\r\n    return <PageView\r\n      key={index}\r\n      onClick={this.handlePageSelected.bind(null, index)}\r\n      selected={selected === index}\r\n      pageClassName={pageClassName}\r\n      pageLinkClassName={pageLinkClassName}\r\n      activeClassName={activeClassName}\r\n      extraAriaContext={extraAriaContext}\r\n      href={this.hrefBuilder(index)}\r\n      page={index + 1} />\r\n  }\r\n\r\n  pagination = () => {\r\n    const items = [];\r\n    const {\r\n      pageRangeDisplayed,\r\n      pageCount,\r\n      marginPagesDisplayed,\r\n      breakLabel,\r\n      breakClassName\r\n    } = this.props;\r\n\r\n    const { selected } = this.state;\r\n\r\n    if (pageCount <= pageRangeDisplayed) {\r\n\r\n      for (let index = 0; index < pageCount; index++) {\r\n        items.push(this.getPageElement(index));\r\n      }\r\n\r\n    } else {\r\n\r\n      let leftSide  = (pageRangeDisplayed / 2);\r\n      let rightSide = (pageRangeDisplayed - leftSide);\r\n\r\n      // If the selected page index is on the default right side of the pagination,\r\n      // we consider that the new right side is made up of it (= only one break element).\r\n      // If the selected page index is on the default left side of the pagination,\r\n      // we consider that the new left side is made up of it (= only one break element).\r\n      if (selected > pageCount - pageRangeDisplayed / 2) {\r\n        rightSide = pageCount - selected;\r\n        leftSide  = pageRangeDisplayed - rightSide;\r\n      }\r\n      else if (selected < pageRangeDisplayed / 2) {\r\n        leftSide  = selected;\r\n        rightSide = pageRangeDisplayed - leftSide;\r\n      }\r\n\r\n      let index;\r\n      let page;\r\n      let breakView;\r\n      let createPageView = (index) => this.getPageElement(index);\r\n\r\n      for (index = 0; index < pageCount; index++) {\r\n\r\n        page = index + 1;\r\n\r\n        // If the page index is lower than the margin defined,\r\n        // the page has to be displayed on the left side of\r\n        // the pagination.\r\n        if (page <= marginPagesDisplayed) {\r\n          items.push(createPageView(index));\r\n          continue;\r\n        }\r\n\r\n        // If the page index is greater than the page count\r\n        // minus the margin defined, the page has to be\r\n        // displayed on the right side of the pagination.\r\n        if (page > pageCount - marginPagesDisplayed) {\r\n          items.push(createPageView(index));\r\n          continue;\r\n        }\r\n\r\n        // If the page index is near the selected page index\r\n        // and inside the defined range (pageRangeDisplayed)\r\n        // we have to display it (it will create the center\r\n        // part of the pagination).\r\n        if ((index >= selected - leftSide) && (index <= selected + rightSide)) {\r\n          items.push(createPageView(index));\r\n          continue;\r\n        }\r\n\r\n        // If the page index doesn't meet any of the conditions above,\r\n        // we check if the last item of the current \"items\" array\r\n        // is a break element. If not, we add a break element, else,\r\n        // we do nothing (because we don't want to display the page).\r\n        if (breakLabel && items[items.length - 1] !== breakView) {\r\n          breakView = (\r\n            <BreakView\r\n              key={index}\r\n              breakLabel={breakLabel}\r\n              breakClassName={breakClassName}\r\n            />\r\n          );\r\n          items.push(breakView);\r\n        }\r\n      }\r\n    }\r\n\r\n    return items;\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      disabledClassName,\r\n      previousClassName,\r\n      nextClassName,\r\n      pageCount,\r\n      containerClassName,\r\n      previousLinkClassName,\r\n      previousLabel,\r\n      nextLinkClassName,\r\n      nextLabel\r\n    } = this.props;\r\n\r\n    const { selected } = this.state;\r\n\r\n    const previousClasses = previousClassName + (selected === 0 ? ` ${disabledClassName}` : '');\r\n    const nextClasses = nextClassName + (selected === pageCount - 1 ? ` ${disabledClassName}` : '');\r\n\r\n    return (\r\n      <ul className={containerClassName}>\r\n        <li className={previousClasses}>\r\n          <a onClick={this.handlePreviousPage}\r\n             className={previousLinkClassName}\r\n             href={this.hrefBuilder(selected - 1)}\r\n             tabIndex=\"0\"\r\n             role=\"button\"\r\n             onKeyPress={this.handlePreviousPage}>\r\n            {previousLabel}\r\n          </a>\r\n        </li>\r\n\r\n        {this.pagination()}\r\n\r\n        <li className={nextClasses}>\r\n          <a onClick={this.handleNextPage}\r\n             className={nextLinkClassName}\r\n             href={this.hrefBuilder(selected + 1)}\r\n             tabIndex=\"0\"\r\n             role=\"button\"\r\n             onKeyPress={this.handleNextPage}>\r\n            {nextLabel}\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n};\r\n"]}