{"version":3,"sources":["../react_components/PaginationBoxView.js"],"names":["PaginationBoxView","props","handlePreviousPage","selected","state","evt","preventDefault","returnValue","handlePageSelected","handleNextPage","pageCount","setState","callCallback","handleBreakClick","index","getForwardJump","getBackwardJump","selectedItem","onPageChange","pagination","items","pageRangeDisplayed","marginPagesDisplayed","breakLabel","breakClassName","breakLinkClassName","push","getPageElement","leftSide","rightSide","page","breakView","createPageView","length","bind","initialPage","forcePage","disableInitialCallback","nextProps","forwardJump","backwardJump","pageIndex","hrefBuilder","pageClassName","pageLinkClassName","activeClassName","activeLinkClassName","extraAriaContext","disabledClassName","previousClassName","nextClassName","containerClassName","previousLinkClassName","previousLabel","nextLinkClassName","nextLabel","previousClasses","nextClasses","Component","propTypes","PropTypes","number","isRequired","node","oneOfType","string","func","bool","defaultProps"],"mappings":"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","file":"PaginationBoxView.js","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport PageView from './PageView';\nimport BreakView from './BreakView';\n\n\nexport default class PaginationBoxView extends Component {\n  static propTypes = {\n    pageCount             : PropTypes.number.isRequired,\n    pageRangeDisplayed    : PropTypes.number.isRequired,\n    marginPagesDisplayed  : PropTypes.number.isRequired,\n    previousLabel         : PropTypes.node,\n    nextLabel             : PropTypes.node,\n    breakLabel            : PropTypes.oneOfType([\n                              PropTypes.string,\n                              PropTypes.node,\n                            ]),\n    hrefBuilder           : PropTypes.func,\n    onPageChange          : PropTypes.func,\n    initialPage           : PropTypes.number,\n    forcePage             : PropTypes.number,\n    disableInitialCallback: PropTypes.bool,\n    containerClassName    : PropTypes.string,\n    pageClassName         : PropTypes.string,\n    pageLinkClassName     : PropTypes.string,\n    activeClassName       : PropTypes.string,\n    activeLinkClassName   : PropTypes.string,\n    previousClassName     : PropTypes.string,\n    nextClassName         : PropTypes.string,\n    previousLinkClassName : PropTypes.string,\n    nextLinkClassName     : PropTypes.string,\n    disabledClassName     : PropTypes.string,\n    breakClassName        : PropTypes.string,\n    breakLinkClassName    : PropTypes.string\n  };\n\n  static defaultProps = {\n    pageCount             : 10,\n    pageRangeDisplayed    : 2,\n    marginPagesDisplayed  : 3,\n    activeClassName       : \"selected\",\n    previousClassName     : \"previous\",\n    nextClassName         : \"next\",\n    previousLabel         : \"Previous\",\n    nextLabel             : \"Next\",\n    breakLabel            : \"...\",\n    disabledClassName     : \"disabled\",\n    disableInitialCallback: false\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selected: props.initialPage ? props.initialPage :\n                props.forcePage   ? props.forcePage :\n                0\n    };\n  }\n\n  componentDidMount() {\n    const { initialPage, disableInitialCallback } = this.props;\n    // Call the callback with the initialPage item:\n    if (typeof(initialPage) !== 'undefined' && !disableInitialCallback) {\n      this.callCallback(initialPage);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (typeof(nextProps.forcePage) !== 'undefined' && this.props.forcePage !== nextProps.forcePage) {\n      this.setState({selected: nextProps.forcePage});\n    }\n  }\n\n  handlePreviousPage = evt => {\n    const { selected } = this.state;\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected > 0) {\n      this.handlePageSelected(selected - 1, evt);\n    }\n  };\n\n  handleNextPage = evt => {\n    const { selected } = this.state;\n    const { pageCount } = this.props;\n\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n    if (selected < pageCount - 1) {\n      this.handlePageSelected(selected + 1, evt);\n    }\n  };\n\n  handlePageSelected = (selected, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    if (this.state.selected === selected) return;\n\n    this.setState({selected: selected});\n\n    // Call the callback with the new selected item:\n    this.callCallback(selected);\n  };\n\n  getForwardJump() {\n    const { selected } = this.state;\n    const { pageCount, pageRangeDisplayed } = this.props;\n\n    const forwardJump = selected + pageRangeDisplayed;\n    return forwardJump >= pageCount ? pageCount - 1 : forwardJump;\n  }\n\n  getBackwardJump() {\n    const { selected } = this.state;\n    const { pageRangeDisplayed } = this.props;\n\n    const backwardJump = selected - pageRangeDisplayed;\n    return backwardJump < 0 ? 0 : backwardJump;\n  }\n\n  handleBreakClick = (index, evt) => {\n    evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);\n\n    const { selected } = this.state;\n\n    this.handlePageSelected(\n      selected < index ?\n        this.getForwardJump() :\n        this.getBackwardJump(),\n      evt\n    );\n  }\n\n  hrefBuilder(pageIndex) {\n    const { hrefBuilder, pageCount } = this.props;\n    if (hrefBuilder &&\n      pageIndex !== this.state.selected &&\n      pageIndex >= 0 &&\n      pageIndex < pageCount\n    ) {\n      return hrefBuilder(pageIndex + 1);\n    }\n  }\n\n  callCallback = (selectedItem) => {\n    if (typeof(this.props.onPageChange) !== \"undefined\" &&\n        typeof(this.props.onPageChange) === \"function\") {\n      this.props.onPageChange({selected: selectedItem});\n    }\n  };\n\n  getPageElement(index) {\n    const { selected } = this.state;\n    const {\n      pageClassName,\n      pageLinkClassName,\n      activeClassName,\n      activeLinkClassName,\n      extraAriaContext\n    } = this.props;\n\n    return <PageView\n      key={index}\n      onClick={this.handlePageSelected.bind(null, index)}\n      selected={selected === index}\n      pageClassName={pageClassName}\n      pageLinkClassName={pageLinkClassName}\n      activeClassName={activeClassName}\n      activeLinkClassName={activeLinkClassName}\n      extraAriaContext={extraAriaContext}\n      href={this.hrefBuilder(index)}\n      page={index + 1} />\n  }\n\n  pagination = () => {\n    const items = [];\n    const {\n      pageRangeDisplayed,\n      pageCount,\n      marginPagesDisplayed,\n      breakLabel,\n      breakClassName,\n      breakLinkClassName\n    } = this.props;\n\n    const { selected } = this.state;\n\n    if (pageCount <= pageRangeDisplayed) {\n\n      for (let index = 0; index < pageCount; index++) {\n        items.push(this.getPageElement(index));\n      }\n\n    } else {\n\n      let leftSide  = (pageRangeDisplayed / 2);\n      let rightSide = (pageRangeDisplayed - leftSide);\n\n      // If the selected page index is on the default right side of the pagination,\n      // we consider that the new right side is made up of it (= only one break element).\n      // If the selected page index is on the default left side of the pagination,\n      // we consider that the new left side is made up of it (= only one break element).\n      if (selected > pageCount - pageRangeDisplayed / 2) {\n        rightSide = pageCount - selected;\n        leftSide  = pageRangeDisplayed - rightSide;\n      }\n      else if (selected < pageRangeDisplayed / 2) {\n        leftSide  = selected;\n        rightSide = pageRangeDisplayed - leftSide;\n      }\n\n      let index;\n      let page;\n      let breakView;\n      let createPageView = (index) => this.getPageElement(index);\n\n      for (index = 0; index < pageCount; index++) {\n\n        page = index + 1;\n\n        // If the page index is lower than the margin defined,\n        // the page has to be displayed on the left side of\n        // the pagination.\n        if (page <= marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is greater than the page count\n        // minus the margin defined, the page has to be\n        // displayed on the right side of the pagination.\n        if (page > pageCount - marginPagesDisplayed) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index is near the selected page index\n        // and inside the defined range (pageRangeDisplayed)\n        // we have to display it (it will create the center\n        // part of the pagination).\n        if ((index >= selected - leftSide) && (index <= selected + rightSide)) {\n          items.push(createPageView(index));\n          continue;\n        }\n\n        // If the page index doesn't meet any of the conditions above,\n        // we check if the last item of the current \"items\" array\n        // is a break element. If not, we add a break element, else,\n        // we do nothing (because we don't want to display the page).\n        if (breakLabel && items[items.length - 1] !== breakView) {\n          breakView = (\n            <BreakView\n              key={index}\n              breakLabel={breakLabel}\n              breakClassName={breakClassName}\n              breakLinkClassName={breakLinkClassName}\n              onClick={this.handleBreakClick.bind(null, index)}\n            />\n          );\n          items.push(breakView);\n        }\n      }\n    }\n\n    return items;\n  };\n\n  render() {\n    const {\n      disabledClassName,\n      previousClassName,\n      nextClassName,\n      pageCount,\n      containerClassName,\n      previousLinkClassName,\n      previousLabel,\n      nextLinkClassName,\n      nextLabel\n    } = this.props;\n\n    const { selected } = this.state;\n\n    const previousClasses = previousClassName + (selected === 0 ? ` ${disabledClassName}` : '');\n    const nextClasses = nextClassName + (selected === pageCount - 1 ? ` ${disabledClassName}` : '');\n\n    return (\n      <ul className={containerClassName}>\n        <li className={previousClasses}>\n          <a onClick={this.handlePreviousPage}\n             className={previousLinkClassName}\n             href={this.hrefBuilder(selected - 1)}\n             tabIndex=\"0\"\n             role=\"button\"\n             onKeyPress={this.handlePreviousPage}>\n            {previousLabel}\n          </a>\n        </li>\n\n        {this.pagination()}\n\n        <li className={nextClasses}>\n          <a onClick={this.handleNextPage}\n             className={nextLinkClassName}\n             href={this.hrefBuilder(selected + 1)}\n             tabIndex=\"0\"\n             role=\"button\"\n             onKeyPress={this.handleNextPage}>\n            {nextLabel}\n          </a>\n        </li>\n      </ul>\n    );\n  }\n};\n"]}